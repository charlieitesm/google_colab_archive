{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Covid19-EarlyStopping","provenance":[{"file_id":"1o3fJ0WB0HaXXXAWCnO-2oH3g1ofX0dSz","timestamp":1590890753603},{"file_id":"1SFXnZtiAphKZzSjGtt9nKcxg5TjyQkln","timestamp":1590801201642},{"file_id":"17Cy1k2j3jddC7wQG8cL55mDQm-o2jvue","timestamp":1590776343035}],"collapsed_sections":[],"mount_file_id":"1ASljYBXCtJZ5W2_CP8kzZX2hQACttaG0","authorship_tag":"ABX9TyNkNWBTyCCssvLTNGwFQDdO"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"l8d2PHS9ajT1","colab_type":"text"},"source":["# Templating code"]},{"cell_type":"code","metadata":{"id":"0xEMkvKqoHNQ","colab_type":"code","colab":{}},"source":["%matplotlib inline\n","import tensorflow as tf\n","\n","from keras.preprocessing import image\n","from keras.preprocessing.image import img_to_array, ImageDataGenerator\n","\n","import matplotlib\n","import matplotlib.pyplot as plt\n","\n","import numpy as np\n","from numpy import array\n","\n","from sklearn.metrics import classification_report, confusion_matrix\n","import sklearn.model_selection as model_selection\n","\n","from imutils import paths\n","import shutil\n","\n","# Needed to load the Dataset from Google Drive\n","from google.colab import drive\n","\n","import os\n","import time\n","import random\n","\n","\n","\n","def train_model(model_to_fit: tf.python.keras.engine.training.Model,\n","                epochs: int,\n","                batch: int,\n","                train_generator: tf.keras.preprocessing.image.Iterator,\n","                valid_generator: tf.keras.preprocessing.image.Iterator,\n","                callbacks: list = None):\n","    \n","    step_size_train = train_generator.n//train_generator.batch_size\n","    step_size_valid = valid_generator.n//valid_generator.batch_size\n","\n","    t = time.process_time()\n","    \n","    trained_model_history = model_to_fit.fit(x=train_generator,\n","                                            steps_per_epoch=step_size_train,\n","                                            validation_data=valid_generator,\n","                                            validation_steps=step_size_valid,\n","                                            epochs=epochs,\n","                                            callbacks=callbacks)\n","    \n","    elapsed_time = time.process_time() - t\n","    \n","    print(f\"\\n\\n ********* Training time: {elapsed_time} s.\")\n","    return trained_model_history\n","\n","def graph_loss_accuracy(h_model,\n","                        epochs: int,\n","                        subtitle: str = \"\"):\n","    plt.style.use(\"ggplot\")\n","    plt.figure()\n","    plt.plot(np.arange(0,epochs),h_model.history[\"accuracy\"],label=\"train_acc\")\n","    plt.plot(np.arange(0,epochs),h_model.history[\"val_accuracy\"],label=\"val_acc\")\n","    plt.title(\"Training and Validation Accuracy\" \n","              + f\" ({subtitle})\" if subtitle else \"\")\n","    plt.xlabel(\"Epoch\")\n","    plt.ylabel(\"Accuracy\")\n","    plt.legend()\n","\n","    plt.figure()\n","    plt.plot(np.arange(0,epochs),h_model.history[\"loss\"],label=\"train_loss\") \n","    plt.plot(np.arange(0,epochs),h_model.history[\"val_loss\"],label=\"val_loss\")\n","    plt.title(\"Training and Validation Loss\" \n","              + f\" ({subtitle})\" if subtitle else \"\")\n","    plt.xlabel(\"Epoch\")\n","    plt.ylabel(\"Loss\")\n","    plt.legend()\n","\n","    plt.show()\n","\n","# Helper functions for reporting\n","\n","def print_dataset_prediction_report(predictions,\n","                                    dataset_generator: tf.keras.preprocessing.image.Iterator,\n","                                    human_readable_labels: list,\n","                                    dataset_title: str):\n","    print(f\"\\n\\n ****** {dataset_title} Dataset Prediction Report ******\")\n","    \n","    # For classification_report the one_hot_encoding test labels are needed,\n","    #  these are passed in the validation_tuple[1] and test_tuple[1]\n","    print(f\"\\n\\nClassification Report - {dataset_title}:\")\n","    print(classification_report(dataset_generator.labels, \n","                                predictions.argmax(axis=1),\n","                                target_names=human_readable_labels))\n","\n","    print(f\"\\n\\nConfusion Matrix: - {dataset_title}:\")\n","    print(confusion_matrix(dataset_generator.labels,\n","                            predictions.argmax(axis=1)))\n","    \n","    print(\"\\n\")\n","\n","def get_model_size(model: tf.python.keras.engine.training.Model) -> int:\n","    \"\"\"\n","        To get the model size, let's write the model to disk, measure it, and\n","        remove it afterwards.\n","    \"\"\"\n","    model_filename = f\"{model.name}.h5\"\n","    \n","    model.save(model_filename)\n","    \n","    # Transform to MB\n","    size = os.path.getsize(model_filename) / 1024 / 1024\n","    \n","    os.remove(model_filename)\n","\n","    return size\n","\n","def print_optimizer_summary(model: tf.python.keras.engine.training.Model):\n","    optimizer_config = model.optimizer.get_config()\n","    \n","    print(f\"Optimizer Info - {optimizer_config['name']}\")\n","\n","    for key in optimizer_config.keys():\n","        print(f\"\\t{key}: {optimizer_config[key]}\")\n","\n","def evaluate_model(model_to_fit: tf.python.keras.engine.training.Model,\n","                   train_generator: tf.keras.preprocessing.image.Iterator,\n","                   validation_generator: tf.keras.preprocessing.image.Iterator,\n","                   test_generator: tf.keras.preprocessing.image.Iterator,                  \n","                   epochs: int,\n","                   batch: int,\n","                   labels: list,\n","                   callbacks: list = None,\n","                   title: str = \"\"):\n","    \n","    title = \"\" if not title else f\"{title} - \"\n","    graph_subtitle = f\"{title}Epochs: {epochs} Batch: {batch}\"\n","\n","    trained_model_history = train_model(model_to_fit,\n","                            epochs,\n","                            batch,\n","                            train_generator,\n","                            validation_generator,\n","                            callbacks=callbacks)\n","    \n","    graph_loss_accuracy(trained_model_history,\n","                        epochs=len(trained_model_history.epoch), # In case we early stopped\n","                        subtitle=graph_subtitle)\n","    \n","    print(\"\\n\\n ************* Model Information *************\\n\")\n","    \n","    model_to_fit.summary()\n","    \n","    print(f\"Training Dataset Size: {train_generator.n}\")\n","    print(f\"Validation Dataset Size: {validation_generator.n}\")\n","    print(f\"Test Dataset Size: {test_generator.n}\")\n","    print(f\"Batch size: {batch}\")\n","    print(f\"Epochs: {epochs}\")\n","    print(f\"Input Image Size: {model_to_fit.layers[0].input_shape}\")\n","    print(f\"Model size: {get_model_size(model_to_fit)} MB\")\n","    print_optimizer_summary(model_to_fit)\n","    \n","    # --------- VALIDATION Predictions -----------\n","\n","    # The generator must be reset before we use it for predictions because we\n","    #  already consumed the iterator during the training process\n","    valid_generator.reset()\n","\n","    val_model_predictions = model_to_fit.predict(validation_generator,\n","                                                    batch_size=batch,\n","                                                    #steps=STEP_SIZE_VALID\n","                                                    )\n","    \n","    print_dataset_prediction_report(val_model_predictions,\n","                                    validation_generator,\n","                                    labels,\n","                                    \"Validation\")\n","\n","\n","    # --------- TEST Predictions -----------\n","\n","    # Use the test_tuple for predictions instead of the validation\n","    #  The test images are in the first position of the test_tuple\n","    test_model_predictions = model_to_fit.predict(test_generator,\n","                                                batch_size=batch)\n","    \n","    print_dataset_prediction_report(test_model_predictions,\n","                                    test_generator,\n","                                    labels,\n","                                    \"Test\")\n","    \n","    return trained_model_history\n","\n","\n","    # Common configurations\n","\n","BASE_DATA_FOLDER = \"/content/drive/My Drive/Datasets/Covid19/data/\"\n","SEED = 2020\n","HUMAN_READABLE_LABELS = [\"Negative\", \"Positive\"]\n","\n","def get_train_val_test_data_aug_gen(preprocessing_function,\n","                                    target_size: tuple,\n","                                    batch_size: int) -> tuple:\n","    # Given that we have few images, we'll do better with some Data Augmentation\n","    train_data_augmentation = ImageDataGenerator(\n","            rescale=1./255, # Normalize the data to be 0-1\n","            shear_range=0.2,\n","            zoom_range=0.2,\n","            horizontal_flip=True,\n","            \n","            preprocessing_function=preprocessing_function)\n","\n","    test_augmentation = ImageDataGenerator(rescale=1./255)\n","\n","    train_generator = train_data_augmentation.flow_from_directory(\n","        directory=BASE_DATA_FOLDER + \"train/\",\n","        target_size=target_size,\n","        color_mode=\"rgb\",\n","        batch_size=batch_size,\n","        class_mode=\"categorical\",\n","        shuffle=True,\n","        seed=SEED,\n","        #save_to_dir=\"/content/drive/My Drive/Datasets/Covid19/augmented\",\n","        #save_prefix=\"aug_\"\n","    )\n","\n","    valid_generator = test_augmentation.flow_from_directory(\n","        directory=BASE_DATA_FOLDER + \"valid/\",\n","        target_size=target_size,\n","        color_mode=\"rgb\",\n","        batch_size=batch_size,\n","        class_mode=\"categorical\",\n","        shuffle=False,\n","        seed=SEED\n","    )\n","\n","    test_generator = test_augmentation.flow_from_directory(\n","        directory=BASE_DATA_FOLDER + \"test/\",\n","        target_size=target_size,\n","        color_mode=\"rgb\",\n","        batch_size=batch_size,\n","        class_mode=None,\n","        shuffle=False\n","    )\n","\n","    return train_generator, valid_generator, test_generator"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"QQrhkRqYapqK","colab_type":"text"},"source":["# Dry run"]},{"cell_type":"code","metadata":{"id":"oQ08pOnOoeer","colab_type":"code","outputId":"3ae83dad-b27e-490f-f862-9cf7c3562914","executionInfo":{"status":"ok","timestamp":1590902081851,"user_tz":300,"elapsed":742827,"user":{"displayName":"C C","photoUrl":"","userId":"11573350402054694558"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["vgg16_batch = 32\n","\n","train_generator, valid_generator, test_generator = get_train_val_test_data_aug_gen(\n","    tf.keras.applications.vgg16.preprocess_input,\n","    (224, 224),\n","    vgg16_batch)\n","\n","base_model = tf.keras.applications.vgg16.VGG16(\n","    input_shape=(224, 224, 3),\n","    include_top=False,\n","    weights=\"imagenet\"\n",")\n","\n","# Freeze the weights on the feature extractor so as to keep them!\n","base_model.trainable = False\n","\n","# Add an FC and Classifier layers\n","\n","vgg16_model = tf.keras.models.Sequential([\n","                base_model,\n","                \n","                tf.keras.layers.GlobalAveragePooling2D(),\n","\n","                tf.keras.layers.Dense(512, activation='relu'),\n","\n","                # Dropout\n","                tf.keras.layers.Dropout(0.5),\n","\n","                #Output   \n","                tf.keras.layers.Dense(2, activation=tf.nn.softmax)\n","            ], name = \"Vgg16-Covid19\")\n","\n","# Add an optimizer\n","\n","es = tf.keras.callbacks.EarlyStopping(\n","                monitor=\"val_accuracy\",\n","                min_delta=0.01,\n","                patience=1,\n","                verbose=1,\n","                mode=\"max\",\n","                #baseline=1.0,\n","                restore_best_weights=False,\n","            )\n","\n","mc = tf.keras.callbacks.ModelCheckpoint(\n","                \"test_vgg16_best_model_tf\",\n","                monitor=\"val_accuracy\",\n","                mode=\"max\",\n","                save_best_only=True,\n","                verbose=1,\n","            )\n","\n","vgg16_model.compile(optimizer=\"adam\",\n","                        loss='categorical_crossentropy',\n","                        metrics=['accuracy'])\n","\n","history = evaluate_model(vgg16_model,\n","                train_generator,\n","                valid_generator,\n","                test_generator,                  \n","                epochs=5,\n","                batch=vgg16_batch,\n","                labels=HUMAN_READABLE_LABELS,\n","                callbacks = [es,mc],\n","                title = \"Vgg16\")"],"execution_count":36,"outputs":[{"output_type":"stream","text":["Found 400 images belonging to 2 classes.\n","Found 52 images belonging to 2 classes.\n","Found 50 images belonging to 2 classes.\n","Epoch 1/5\n","12/12 [==============================] - ETA: 0s - loss: 0.6343 - accuracy: 0.6549 \n","Epoch 00001: val_accuracy improved from -inf to 0.93750, saving model to test_vgg16_best_model_tf\n","INFO:tensorflow:Assets written to: test_vgg16_best_model_tf/assets\n","12/12 [==============================] - 201s 17s/step - loss: 0.6343 - accuracy: 0.6549 - val_loss: 0.2571 - val_accuracy: 0.9375\n","Epoch 2/5\n","12/12 [==============================] - ETA: 0s - loss: 0.3731 - accuracy: 0.8424 \n","Epoch 00002: val_accuracy improved from 0.93750 to 0.96875, saving model to test_vgg16_best_model_tf\n","INFO:tensorflow:Assets written to: test_vgg16_best_model_tf/assets\n","12/12 [==============================] - 212s 18s/step - loss: 0.3731 - accuracy: 0.8424 - val_loss: 0.2217 - val_accuracy: 0.9688\n","Epoch 3/5\n","12/12 [==============================] - ETA: 0s - loss: 0.2423 - accuracy: 0.9103 \n","Epoch 00003: val_accuracy did not improve from 0.96875\n","12/12 [==============================] - 208s 17s/step - loss: 0.2423 - accuracy: 0.9103 - val_loss: 0.1535 - val_accuracy: 0.9688\n","Epoch 00003: early stopping\n","\n","\n"," ********* Training time: 1272.4427518459997 s.\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\n","\n"," ************* Model Information *************\n","\n","Model: \"Vgg16-Covid19\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","vgg16 (Model)                (None, 7, 7, 512)         14714688  \n","_________________________________________________________________\n","global_average_pooling2d_8 ( (None, 512)               0         \n","_________________________________________________________________\n","dense_16 (Dense)             (None, 512)               262656    \n","_________________________________________________________________\n","dropout_8 (Dropout)          (None, 512)               0         \n","_________________________________________________________________\n","dense_17 (Dense)             (None, 2)                 1026      \n","=================================================================\n","Total params: 14,978,370\n","Trainable params: 263,682\n","Non-trainable params: 14,714,688\n","_________________________________________________________________\n","Training Dataset Size: 400\n","Validation Dataset Size: 52\n","Test Dataset Size: 50\n","Batch size: 32\n","Epochs: 5\n","Input Image Size: (None, 224, 224, 3)\n","Model size: 59.21446990966797 MB\n","Optimizer Info - Adam\n","\tname: Adam\n","\tlearning_rate: 0.0010000000474974513\n","\tdecay: 0.0\n","\tbeta_1: 0.8999999761581421\n","\tbeta_2: 0.9990000128746033\n","\tepsilon: 1e-07\n","\tamsgrad: False\n","\n","\n"," ****** Validation Dataset Prediction Report ******\n","\n","\n","Classification Report - Validation:\n","              precision    recall  f1-score   support\n","\n","    Negative       1.00      0.96      0.98        26\n","    Positive       0.96      1.00      0.98        26\n","\n","    accuracy                           0.98        52\n","   macro avg       0.98      0.98      0.98        52\n","weighted avg       0.98      0.98      0.98        52\n","\n","\n","\n","Confusion Matrix: - Validation:\n","[[25  1]\n"," [ 0 26]]\n","\n","\n","\n","\n"," ****** Test Dataset Prediction Report ******\n","\n","\n","Classification Report - Test:\n","              precision    recall  f1-score   support\n","\n","    Negative       0.93      1.00      0.96        25\n","    Positive       1.00      0.92      0.96        25\n","\n","    accuracy                           0.96        50\n","   macro avg       0.96      0.96      0.96        50\n","weighted avg       0.96      0.96      0.96        50\n","\n","\n","\n","Confusion Matrix: - Test:\n","[[25  0]\n"," [ 2 23]]\n","\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"EaIJz8Vv2DON","colab_type":"code","colab":{}},"source":["saved_model = tf.keras.models.load_model(\"test_vgg16_best_model_tf\")"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"44ZU_gAF9Nfb","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":765},"outputId":"78723f87-b789-43ff-f57f-bc2033629e57","executionInfo":{"status":"ok","timestamp":1590901306290,"user_tz":300,"elapsed":59442,"user":{"displayName":"C C","photoUrl":"","userId":"11573350402054694558"}}},"source":["valid_generator.reset()\n","test_generator.reset()\n","\n","val_model_predictions = saved_model.predict(valid_generator,\n","                                                    batch_size=vgg16_batch,\n","                                                    #steps=STEP_SIZE_VALID\n","                                                    )\n","    \n","print_dataset_prediction_report(val_model_predictions,\n","                                valid_generator,\n","                                HUMAN_READABLE_LABELS,\n","                                \"Validation\")\n","\n","\n","# --------- TEST Predictions -----------\n","\n","# Use the test_tuple for predictions instead of the validation\n","#  The test images are in the first position of the test_tuple\n","test_model_predictions = saved_model.predict(test_generator,\n","                                            batch_size=vgg16_batch)\n","\n","print_dataset_prediction_report(test_model_predictions,\n","                                test_generator,\n","                                HUMAN_READABLE_LABELS,\n","                                \"Test\")"],"execution_count":35,"outputs":[{"output_type":"stream","text":["\n","\n"," ****** Validation Dataset Prediction Report ******\n","\n","\n","Classification Report - Validation:\n","              precision    recall  f1-score   support\n","\n","    Negative       0.90      1.00      0.95        26\n","    Positive       1.00      0.88      0.94        26\n","\n","    accuracy                           0.94        52\n","   macro avg       0.95      0.94      0.94        52\n","weighted avg       0.95      0.94      0.94        52\n","\n","\n","\n","Confusion Matrix: - Validation:\n","[[26  0]\n"," [ 3 23]]\n","\n","\n","\n","\n"," ****** Test Dataset Prediction Report ******\n","\n","\n","Classification Report - Test:\n","              precision    recall  f1-score   support\n","\n","    Negative       0.74      1.00      0.85        25\n","    Positive       1.00      0.64      0.78        25\n","\n","    accuracy                           0.82        50\n","   macro avg       0.87      0.82      0.81        50\n","weighted avg       0.87      0.82      0.81        50\n","\n","\n","\n","Confusion Matrix: - Test:\n","[[25  0]\n"," [ 9 16]]\n","\n","\n"],"name":"stdout"}]}]}