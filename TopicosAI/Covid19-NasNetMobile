{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Covid19-NasNetMobile","provenance":[{"file_id":"1SFXnZtiAphKZzSjGtt9nKcxg5TjyQkln","timestamp":1590801201642},{"file_id":"17Cy1k2j3jddC7wQG8cL55mDQm-o2jvue","timestamp":1590776343035}],"collapsed_sections":[],"mount_file_id":"1o3fJ0WB0HaXXXAWCnO-2oH3g1ofX0dSz","authorship_tag":"ABX9TyMqU/xAv56brTTo4nDoRHUz"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"l8d2PHS9ajT1","colab_type":"text"},"source":["# Templating code"]},{"cell_type":"code","metadata":{"id":"0xEMkvKqoHNQ","colab_type":"code","outputId":"e22e54ab-d28e-489d-d682-ffd99aa43c26","executionInfo":{"status":"ok","timestamp":1590948750091,"user_tz":300,"elapsed":3437,"user":{"displayName":"C C","photoUrl":"","userId":"11573350402054694558"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["%matplotlib inline\n","import tensorflow as tf\n","\n","from keras.preprocessing import image\n","from keras.preprocessing.image import img_to_array, ImageDataGenerator\n","\n","import matplotlib\n","import matplotlib.pyplot as plt\n","\n","import numpy as np\n","from numpy import array\n","\n","from sklearn.metrics import classification_report, confusion_matrix\n","import sklearn.model_selection as model_selection\n","\n","from imutils import paths\n","import shutil\n","\n","# Needed to load the Dataset from Google Drive\n","from google.colab import drive\n","\n","import os\n","import time\n","import random\n","\n","\n","\n","def train_model(model_to_fit: tf.python.keras.engine.training.Model,\n","                epochs: int,\n","                batch: int,\n","                train_generator: tf.keras.preprocessing.image.Iterator,\n","                valid_generator: tf.keras.preprocessing.image.Iterator,\n","                callbacks: list = None):\n","    \n","    step_size_train = train_generator.n//train_generator.batch_size\n","    step_size_valid = valid_generator.n//valid_generator.batch_size\n","\n","    t = time.process_time()\n","    \n","    trained_model_history = model_to_fit.fit(x=train_generator,\n","                                            steps_per_epoch=step_size_train,\n","                                            validation_data=valid_generator,\n","                                            validation_steps=step_size_valid,\n","                                            epochs=epochs,\n","                                            callbacks=callbacks)\n","    \n","    elapsed_time = time.process_time() - t\n","    \n","    print(f\"\\n\\n ********* Training time: {elapsed_time} s.\")\n","    return trained_model_history\n","\n","def graph_loss_accuracy(h_model,\n","                        epochs: int,\n","                        subtitle: str = \"\"):\n","    plt.style.use(\"ggplot\")\n","    plt.figure()\n","    plt.plot(np.arange(0,epochs),h_model.history[\"accuracy\"],label=\"train_acc\")\n","    plt.plot(np.arange(0,epochs),h_model.history[\"val_accuracy\"],label=\"val_acc\")\n","    plt.title(\"Training and Validation Accuracy\" \n","              + f\" ({subtitle})\" if subtitle else \"\")\n","    plt.xlabel(\"Epoch\")\n","    plt.ylabel(\"Accuracy\")\n","    plt.legend()\n","\n","    plt.figure()\n","    plt.plot(np.arange(0,epochs),h_model.history[\"loss\"],label=\"train_loss\") \n","    plt.plot(np.arange(0,epochs),h_model.history[\"val_loss\"],label=\"val_loss\")\n","    plt.title(\"Training and Validation Loss\" \n","              + f\" ({subtitle})\" if subtitle else \"\")\n","    plt.xlabel(\"Epoch\")\n","    plt.ylabel(\"Loss\")\n","    plt.legend()\n","\n","    plt.show()\n","\n","# Helper functions for reporting\n","\n","def print_dataset_prediction_report(predictions,\n","                                    dataset_generator: tf.keras.preprocessing.image.Iterator,\n","                                    human_readable_labels: list,\n","                                    dataset_title: str):\n","    print(f\"\\n\\n ****** {dataset_title} Dataset Prediction Report ******\")\n","    \n","    # For classification_report the one_hot_encoding test labels are needed,\n","    #  these are passed in the validation_tuple[1] and test_tuple[1]\n","    print(f\"\\n\\nClassification Report - {dataset_title}:\")\n","    print(classification_report(dataset_generator.labels, \n","                                predictions.argmax(axis=1),\n","                                target_names=human_readable_labels))\n","\n","    print(f\"\\n\\nConfusion Matrix: - {dataset_title}:\")\n","    print(confusion_matrix(dataset_generator.labels,\n","                            predictions.argmax(axis=1)))\n","    \n","    print(\"\\n\")\n","\n","def get_model_size(model: tf.python.keras.engine.training.Model) -> int:\n","    \"\"\"\n","        To get the model size, let's write the model to disk, measure it, and\n","        remove it afterwards.\n","    \"\"\"\n","    model_filename = f\"{model.name}.h5\"\n","    \n","    model.save(model_filename)\n","    \n","    # Transform to MB\n","    size = os.path.getsize(model_filename) / 1024 / 1024\n","    \n","    os.remove(model_filename)\n","\n","    return size\n","\n","def print_optimizer_summary(model: tf.python.keras.engine.training.Model):\n","    optimizer_config = model.optimizer.get_config()\n","    \n","    print(f\"Optimizer Info - {optimizer_config['name']}\")\n","\n","    for key in optimizer_config.keys():\n","        print(f\"\\t{key}: {optimizer_config[key]}\")\n","\n","def evaluate_model(model_to_fit: tf.python.keras.engine.training.Model,\n","                   train_generator: tf.keras.preprocessing.image.Iterator,\n","                   validation_generator: tf.keras.preprocessing.image.Iterator,\n","                   test_generator: tf.keras.preprocessing.image.Iterator,                  \n","                   epochs: int,\n","                   batch: int,\n","                   labels: list,\n","                   callbacks: list = None,\n","                   title: str = \"\"):\n","    \n","    title = \"\" if not title else f\"{title} - \"\n","    graph_subtitle = f\"{title}Epochs: {epochs} Batch: {batch}\"\n","\n","    trained_model_history = train_model(model_to_fit,\n","                            epochs,\n","                            batch,\n","                            train_generator,\n","                            validation_generator,\n","                            callbacks=callbacks)\n","    \n","    graph_loss_accuracy(trained_model_history,\n","                        epochs=len(trained_model_history.epoch), # In case we early stopped\n","                        subtitle=graph_subtitle)\n","    \n","    print(\"\\n\\n ************* Model Information *************\\n\")\n","    \n","    model_to_fit.summary()\n","    \n","    print(f\"Training Dataset Size: {train_generator.n}\")\n","    print(f\"Validation Dataset Size: {validation_generator.n}\")\n","    print(f\"Test Dataset Size: {test_generator.n}\")\n","    print(f\"Batch size: {batch}\")\n","    print(f\"Epochs: {epochs}\")\n","    print(f\"Input Image Size: {model_to_fit.layers[0].input_shape}\")\n","    print(f\"Model size: {get_model_size(model_to_fit)} MB\")\n","    print_optimizer_summary(model_to_fit)\n","    \n","    # --------- VALIDATION Predictions -----------\n","\n","    # The generator must be reset before we use it for predictions because we\n","    #  already consumed the iterator during the training process\n","    valid_generator.reset()\n","\n","    val_model_predictions = model_to_fit.predict(validation_generator,\n","                                                    batch_size=batch,\n","                                                    #steps=STEP_SIZE_VALID\n","                                                    )\n","    \n","    print_dataset_prediction_report(val_model_predictions,\n","                                    validation_generator,\n","                                    labels,\n","                                    \"Validation\")\n","\n","\n","    # --------- TEST Predictions -----------\n","\n","    # Use the test_tuple for predictions instead of the validation\n","    #  The test images are in the first position of the test_tuple\n","    test_model_predictions = model_to_fit.predict(test_generator,\n","                                                batch_size=batch)\n","    \n","    print_dataset_prediction_report(test_model_predictions,\n","                                    test_generator,\n","                                    labels,\n","                                    \"Test\")\n","    \n","\n","\n","\n","    # Common configurations\n","\n","BASE_DATA_FOLDER = \"/content/drive/My Drive/Datasets/Covid19/data/\"\n","COVID19_MODEL_FOLDERS = \"/content/drive/My Drive/Datasets/Covid19/models/\"\n","SEED = 2020\n","HUMAN_READABLE_LABELS = [\"Negative\", \"Positive\"]\n","\n","def get_train_val_test_data_aug_gen(preprocessing_function,\n","                                    target_size: tuple,\n","                                    batch_size: int) -> tuple:\n","    # Given that we have few images, we'll do better with some Data Augmentation\n","    train_data_augmentation = ImageDataGenerator(\n","            rescale=1./255, # Normalize the data to be 0-1\n","            shear_range=0.2,\n","            zoom_range=0.2,\n","            horizontal_flip=True,\n","            \n","            preprocessing_function=preprocessing_function)\n","\n","    test_augmentation = ImageDataGenerator(rescale=1./255)\n","\n","    train_generator = train_data_augmentation.flow_from_directory(\n","        directory=BASE_DATA_FOLDER + \"train/\",\n","        target_size=target_size,\n","        color_mode=\"rgb\",\n","        batch_size=batch_size,\n","        class_mode=\"categorical\",\n","        shuffle=True,\n","        seed=SEED,\n","        #save_to_dir=\"/content/drive/My Drive/Datasets/Covid19/augmented\",\n","        #save_prefix=\"aug_\"\n","    )\n","\n","    valid_generator = test_augmentation.flow_from_directory(\n","        directory=BASE_DATA_FOLDER + \"valid/\",\n","        target_size=target_size,\n","        color_mode=\"rgb\",\n","        batch_size=batch_size,\n","        class_mode=\"categorical\",\n","        shuffle=False,\n","        seed=SEED\n","    )\n","\n","    test_generator = test_augmentation.flow_from_directory(\n","        directory=BASE_DATA_FOLDER + \"test/\",\n","        target_size=target_size,\n","        color_mode=\"rgb\",\n","        batch_size=batch_size,\n","        class_mode=None,\n","        shuffle=False\n","    )\n","\n","    return train_generator, valid_generator, test_generator"],"execution_count":1,"outputs":[{"output_type":"stream","text":["Using TensorFlow backend.\n"],"name":"stderr"}]},{"cell_type":"markdown","metadata":{"id":"QQrhkRqYapqK","colab_type":"text"},"source":["# Dry run"]},{"cell_type":"code","metadata":{"id":"oQ08pOnOoeer","colab_type":"code","outputId":"28511fb5-129f-4bdd-f48b-8dddc5aa250d","executionInfo":{"status":"ok","timestamp":1590904618607,"user_tz":300,"elapsed":975499,"user":{"displayName":"C C","photoUrl":"","userId":"11573350402054694558"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["nasnet_batch = 16\n","\n","train_generator, valid_generator, test_generator = get_train_val_test_data_aug_gen(\n","    tf.keras.applications.nasnet.preprocess_input,\n","    (224, 224),\n","    nasnet_batch)\n","\n","base_model = tf.keras.applications.nasnet.NASNetMobile(\n","    input_shape=(224, 224, 3),\n","    include_top=False,\n","    weights=\"imagenet\"\n",")\n","\n","# Freeze the weights on the feature extractor so as to keep them!\n","\n","# Freeze the weights on the feature extractor so as to keep them!\n","for layer in base_model.layers[:65]:\n","    layer.trainable = False\n","\n","for layer in base_model.layers[65:]:\n","    layer.trainable = True\n","\n","# Add an FC and Classifier layers\n","\n","nasnet_model = tf.keras.models.Sequential([\n","                base_model,\n","                \n","                tf.keras.layers.GlobalAveragePooling2D(),\n","\n","                tf.keras.layers.Dense(512, activation='relu'),\n","\n","                # Dropout\n","                tf.keras.layers.Dropout(0.2),\n","\n","                #Output   \n","                tf.keras.layers.Dense(2, activation=tf.nn.softmax)\n","            ], name = \"NasNet-Covid19\")\n","\n","# Add an optimizer\n","nasnetmobile_lr_sched = tf.keras.optimizers.schedules.ExponentialDecay(\n","                            initial_learning_rate = 0.045,\n","                            decay_steps = (train_generator.n // nasnet_batch) * 2, # Every 2 epochs\n","                            decay_rate = 0.94,\n","                            staircase = False\n","                        )\n","\n","nasnetmobile_optimizer = tf.keras.optimizers.RMSprop(\n","                                    learning_rate=nasnetmobile_lr_sched,\n","                                    epsilon=1.0,\n","                                    decay=0.9,\n","                                    clipvalue=2.0)\n","\n","nasnet_model.compile(optimizer=\"rmsprop\",\n","                        loss='categorical_crossentropy',\n","                        metrics=['accuracy'])\n","\n","nasnet_es = tf.keras.callbacks.EarlyStopping(\n","                monitor=\"val_loss\",\n","                min_delta=0.01,\n","                patience=3,\n","                verbose=1,\n","                mode=\"min\",\n","                #baseline=1.0,\n","                restore_best_weights=False,\n","            )\n","\n","nasnet_mc = tf.keras.callbacks.ModelCheckpoint(\n","                COVID19_MODEL_FOLDERS + \"nasnetmobile\",\n","                monitor=\"val_accuracy\",\n","                mode=\"max\",\n","                save_best_only=True,\n","                verbose=1,\n","            )\n","\n","evaluate_model(nasnet_model,\n","                train_generator,\n","                valid_generator,\n","                test_generator,                  \n","                epochs=10,\n","                batch=nasnet_batch,\n","                labels=HUMAN_READABLE_LABELS,\n","                callbacks = [nasnet_es, nasnet_mc],\n","                title = \"NasNet\")"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Found 400 images belonging to 2 classes.\n","Found 52 images belonging to 2 classes.\n","Found 50 images belonging to 2 classes.\n","Epoch 1/10\n","25/25 [==============================] - ETA: 0s - loss: 0.4966 - accuracy: 0.8325\n","Epoch 00001: val_accuracy improved from -inf to 0.66667, saving model to /content/drive/My Drive/Datasets/Covid19/models/nasnetmobile\n","INFO:tensorflow:Assets written to: /content/drive/My Drive/Datasets/Covid19/models/nasnetmobile/assets\n","25/25 [==============================] - 238s 10s/step - loss: 0.4966 - accuracy: 0.8325 - val_loss: 0.5834 - val_accuracy: 0.6667\n","Epoch 2/10\n","25/25 [==============================] - ETA: 0s - loss: 0.2072 - accuracy: 0.9300\n","Epoch 00002: val_accuracy improved from 0.66667 to 0.89583, saving model to /content/drive/My Drive/Datasets/Covid19/models/nasnetmobile\n","INFO:tensorflow:Assets written to: /content/drive/My Drive/Datasets/Covid19/models/nasnetmobile/assets\n","25/25 [==============================] - 242s 10s/step - loss: 0.2072 - accuracy: 0.9300 - val_loss: 0.2560 - val_accuracy: 0.8958\n","Epoch 3/10\n","25/25 [==============================] - ETA: 0s - loss: 0.1901 - accuracy: 0.9300\n","Epoch 00003: val_accuracy did not improve from 0.89583\n","25/25 [==============================] - 126s 5s/step - loss: 0.1901 - accuracy: 0.9300 - val_loss: 1.6478 - val_accuracy: 0.6458\n","Epoch 4/10\n","25/25 [==============================] - ETA: 0s - loss: 0.1864 - accuracy: 0.9425\n","Epoch 00004: val_accuracy did not improve from 0.89583\n","25/25 [==============================] - 125s 5s/step - loss: 0.1864 - accuracy: 0.9425 - val_loss: 1.3126 - val_accuracy: 0.6042\n","Epoch 5/10\n","25/25 [==============================] - ETA: 0s - loss: 0.1434 - accuracy: 0.9500\n","Epoch 00005: val_accuracy did not improve from 0.89583\n","25/25 [==============================] - 125s 5s/step - loss: 0.1434 - accuracy: 0.9500 - val_loss: 4.9441 - val_accuracy: 0.5417\n","Epoch 00005: early stopping\n","\n","\n"," ********* Training time: 1541.6894893429999 s.\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\n","\n"," ************* Model Information *************\n","\n","Model: \"NasNet-Covid19\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","NASNet (Model)               (None, 7, 7, 1056)        4269716   \n","_________________________________________________________________\n","global_average_pooling2d_1 ( (None, 1056)              0         \n","_________________________________________________________________\n","dense_2 (Dense)              (None, 512)               541184    \n","_________________________________________________________________\n","dropout_1 (Dropout)          (None, 512)               0         \n","_________________________________________________________________\n","dense_3 (Dense)              (None, 2)                 1026      \n","=================================================================\n","Total params: 4,811,926\n","Trainable params: 4,763,966\n","Non-trainable params: 47,960\n","_________________________________________________________________\n","Training Dataset Size: 400\n","Validation Dataset Size: 52\n","Test Dataset Size: 50\n","Batch size: 16\n","Epochs: 10\n","Input Image Size: (None, 224, 224, 3)\n","Model size: 39.10063934326172 MB\n","Optimizer Info - RMSprop\n","\tname: RMSprop\n","\tlearning_rate: 0.0010000000474974513\n","\tdecay: 0.0\n","\trho: 0.8999999761581421\n","\tmomentum: 0.0\n","\tepsilon: 1e-07\n","\tcentered: False\n","\n","\n"," ****** Validation Dataset Prediction Report ******\n","\n","\n","Classification Report - Validation:\n","              precision    recall  f1-score   support\n","\n","    Negative       0.50      1.00      0.67        26\n","    Positive       0.00      0.00      0.00        26\n","\n","    accuracy                           0.50        52\n","   macro avg       0.25      0.50      0.33        52\n","weighted avg       0.25      0.50      0.33        52\n","\n","\n","\n","Confusion Matrix: - Validation:\n","[[26  0]\n"," [26  0]]\n","\n","\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/metrics/_classification.py:1272: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n"],"name":"stderr"},{"output_type":"stream","text":["\n","\n"," ****** Test Dataset Prediction Report ******\n","\n","\n","Classification Report - Test:\n","              precision    recall  f1-score   support\n","\n","    Negative       0.50      1.00      0.67        25\n","    Positive       0.00      0.00      0.00        25\n","\n","    accuracy                           0.50        50\n","   macro avg       0.25      0.50      0.33        50\n","weighted avg       0.25      0.50      0.33        50\n","\n","\n","\n","Confusion Matrix: - Test:\n","[[25  0]\n"," [25  0]]\n","\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"ebp-Yk2rTuT3","colab_type":"code","colab":{}},"source":["saved_model = tf.keras.models.load_model(COVID19_MODEL_FOLDERS + \"nasnetmobile\")"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Jg7TI-ngTvGM","colab_type":"code","outputId":"ed01bbd8-80f1-4e74-84e7-b025915c14b5","executionInfo":{"status":"ok","timestamp":1590904852930,"user_tz":300,"elapsed":20423,"user":{"displayName":"C C","photoUrl":"","userId":"11573350402054694558"}},"colab":{"base_uri":"https://localhost:8080/","height":765}},"source":["valid_generator.reset()\n","test_generator.reset()\n","\n","val_model_predictions = saved_model.predict(valid_generator,\n","                                                    batch_size=nasnet_batch,\n","                                                    #steps=STEP_SIZE_VALID\n","                                                    )\n","    \n","print_dataset_prediction_report(val_model_predictions,\n","                                valid_generator,\n","                                HUMAN_READABLE_LABELS,\n","                                \"Validation\")\n","\n","\n","# --------- TEST Predictions -----------\n","\n","# Use the test_tuple for predictions instead of the validation\n","#  The test images are in the first position of the test_tuple\n","test_model_predictions = saved_model.predict(test_generator,\n","                                            batch_size=nasnet_batch)\n","\n","print_dataset_prediction_report(test_model_predictions,\n","                                test_generator,\n","                                HUMAN_READABLE_LABELS,\n","                                \"Test\")"],"execution_count":0,"outputs":[{"output_type":"stream","text":["\n","\n"," ****** Validation Dataset Prediction Report ******\n","\n","\n","Classification Report - Validation:\n","              precision    recall  f1-score   support\n","\n","    Negative       0.86      0.96      0.91        26\n","    Positive       0.96      0.85      0.90        26\n","\n","    accuracy                           0.90        52\n","   macro avg       0.91      0.90      0.90        52\n","weighted avg       0.91      0.90      0.90        52\n","\n","\n","\n","Confusion Matrix: - Validation:\n","[[25  1]\n"," [ 4 22]]\n","\n","\n","\n","\n"," ****** Test Dataset Prediction Report ******\n","\n","\n","Classification Report - Test:\n","              precision    recall  f1-score   support\n","\n","    Negative       0.78      1.00      0.88        25\n","    Positive       1.00      0.72      0.84        25\n","\n","    accuracy                           0.86        50\n","   macro avg       0.89      0.86      0.86        50\n","weighted avg       0.89      0.86      0.86        50\n","\n","\n","\n","Confusion Matrix: - Test:\n","[[25  0]\n"," [ 7 18]]\n","\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"XZfR39ML7wwA","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":68},"outputId":"bbd9abaa-d25c-41a7-de68-0e24be4996a1","executionInfo":{"status":"ok","timestamp":1590950573097,"user_tz":300,"elapsed":85627,"user":{"displayName":"C C","photoUrl":"","userId":"11573350402054694558"}}},"source":["nasnet_batch = 16\n","\n","for layer in saved_model.layers[0].layers[:644]:\n","    layer.trainable = False\n","for layer in saved_model.layers[0].layers[644:]:\n","    layer.trainable = True\n","\n","train_generator, valid_generator, test_generator = get_train_val_test_data_aug_gen(\n","    tf.keras.applications.nasnet.preprocess_input,\n","    (224, 224),\n","    nasnet_batch)\n"],"execution_count":16,"outputs":[{"output_type":"stream","text":["Found 400 images belonging to 2 classes.\n","Found 52 images belonging to 2 classes.\n","Found 50 images belonging to 2 classes.\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"uDmGx-0N89-X","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":1000},"outputId":"75e9156b-9632-4db7-bce9-b92c5c78e01c","executionInfo":{"status":"ok","timestamp":1590951182504,"user_tz":300,"elapsed":692564,"user":{"displayName":"C C","photoUrl":"","userId":"11573350402054694558"}}},"source":["nasnet_es = tf.keras.callbacks.EarlyStopping(\n","                monitor=\"val_loss\",\n","                min_delta=0.01,\n","                patience=2,\n","                verbose=1,\n","                mode=\"min\",\n","                #baseline=1.0,\n","                restore_best_weights=False,\n","            )\n","\n","evaluate_model(saved_model,\n","                train_generator,\n","                valid_generator,\n","                test_generator,                  \n","                epochs=10,\n","                batch=nasnet_batch,\n","                labels=HUMAN_READABLE_LABELS,\n","                callbacks = [nasnet_es],\n","                title = \"NasNet\")"],"execution_count":17,"outputs":[{"output_type":"stream","text":["Epoch 1/10\n","25/25 [==============================] - 165s 7s/step - loss: 0.2240 - accuracy: 0.9475 - val_loss: 2.0933 - val_accuracy: 0.7917\n","Epoch 2/10\n","25/25 [==============================] - 161s 6s/step - loss: 0.1892 - accuracy: 0.9575 - val_loss: 53.1057 - val_accuracy: 0.7708\n","Epoch 3/10\n","25/25 [==============================] - 162s 6s/step - loss: 0.0474 - accuracy: 0.9900 - val_loss: 222.2068 - val_accuracy: 0.5417\n","Epoch 00003: early stopping\n","\n","\n"," ********* Training time: 1036.8450922939996 s.\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\n","\n"," ************* Model Information *************\n","\n","Model: \"NasNet-Covid19\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","NASNet (Model)               (None, 7, 7, 1056)        4269716   \n","_________________________________________________________________\n","global_average_pooling2d_1 ( (None, 1056)              0         \n","_________________________________________________________________\n","dense_2 (Dense)              (None, 512)               541184    \n","_________________________________________________________________\n","dropout_1 (Dropout)          (None, 512)               0         \n","_________________________________________________________________\n","dense_3 (Dense)              (None, 2)                 1026      \n","=================================================================\n","Total params: 4,811,926\n","Trainable params: 2,308,194\n","Non-trainable params: 2,503,732\n","_________________________________________________________________\n","Training Dataset Size: 400\n","Validation Dataset Size: 52\n","Test Dataset Size: 50\n","Batch size: 16\n","Epochs: 10\n","Input Image Size: (None, 224, 224, 3)\n","Model size: 39.24626159667969 MB\n","Optimizer Info - RMSprop\n","\tname: RMSprop\n","\tlearning_rate: 0.0010000000474974513\n","\tdecay: 0.0\n","\trho: 0.8999999761581421\n","\tmomentum: 0.0\n","\tepsilon: 1e-07\n","\tcentered: False\n","\n","\n"," ****** Validation Dataset Prediction Report ******\n","\n","\n","Classification Report - Validation:\n","              precision    recall  f1-score   support\n","\n","    Negative       0.50      1.00      0.67        26\n","    Positive       0.00      0.00      0.00        26\n","\n","    accuracy                           0.50        52\n","   macro avg       0.25      0.50      0.33        52\n","weighted avg       0.25      0.50      0.33        52\n","\n","\n","\n","Confusion Matrix: - Validation:\n","[[26  0]\n"," [26  0]]\n","\n","\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/metrics/_classification.py:1272: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n"],"name":"stderr"},{"output_type":"stream","text":["\n","\n"," ****** Test Dataset Prediction Report ******\n","\n","\n","Classification Report - Test:\n","              precision    recall  f1-score   support\n","\n","    Negative       0.50      1.00      0.67        25\n","    Positive       0.00      0.00      0.00        25\n","\n","    accuracy                           0.50        50\n","   macro avg       0.25      0.50      0.33        50\n","weighted avg       0.25      0.50      0.33        50\n","\n","\n","\n","Confusion Matrix: - Test:\n","[[25  0]\n"," [25  0]]\n","\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"EaIJz8Vv2DON","colab_type":"code","outputId":"070a0a35-ae6b-43bf-8a0a-ff44c3bf704f","executionInfo":{"status":"ok","timestamp":1590813614918,"user_tz":300,"elapsed":263417,"user":{"displayName":"C C","photoUrl":"","userId":"11573350402054694558"}},"colab":{"base_uri":"https://localhost:8080/","height":258}},"source":["trained_model_history = nasnet_model.fit(x=train_generator,\n","                                            steps_per_epoch=train_generator.n//train_generator.batch_size,\n","                                            validation_data=valid_generator,\n","                                            validation_steps=valid_generator.n//valid_generator.batch_size,\n","                                            epochs=2,\n","                                            callbacks=None)\n","trained_model_history.__dict__"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Epoch 1/2\n","25/25 [==============================] - 124s 5s/step - loss: 0.1702 - accuracy: 0.9350 - val_loss: 12.5303 - val_accuracy: 0.5417\n","Epoch 2/2\n","25/25 [==============================] - 126s 5s/step - loss: 0.1604 - accuracy: 0.9450 - val_loss: 14.0441 - val_accuracy: 0.5417\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["{'_chief_worker_only': None,\n"," 'epoch': [0, 1],\n"," 'history': {'accuracy': [0.9350000023841858, 0.9449999928474426],\n","  'loss': [0.17019489407539368, 0.16035722196102142],\n","  'val_accuracy': [0.5416666865348816, 0.5416666865348816],\n","  'val_loss': [12.530333518981934, 14.044116973876953]},\n"," 'model': <tensorflow.python.keras.engine.sequential.Sequential at 0x7f6ce97bc2e8>,\n"," 'params': {'epochs': 2, 'steps': 25, 'verbose': 1},\n"," 'validation_data': None}"]},"metadata":{"tags":[]},"execution_count":24}]},{"cell_type":"code","metadata":{"id":"NVUn6RL93M_6","colab_type":"code","outputId":"1d7cb91a-e995-4d6d-a5f0-ce8028965320","executionInfo":{"status":"ok","timestamp":1590813660524,"user_tz":300,"elapsed":739,"user":{"displayName":"C C","photoUrl":"","userId":"11573350402054694558"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["nasnet_model.__dict__"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'_activity_regularizer': None,\n"," '_auto_track_sub_layers': True,\n"," '_autocast': False,\n"," '_build_input_shape': TensorShape([None, 224, 224, 3]),\n"," '_callable_losses': [],\n"," '_compiled_trainable_state': <WeakKeyDictionary at 0x7f6cf4d4f630>,\n"," '_compute_output_and_mask_jointly': True,\n"," '_distribution_strategy': None,\n"," '_dtype_defaulted_to_floatx': True,\n"," '_dtype_policy': <Policy \"float32\", loss_scale=None>,\n"," '_dynamic': False,\n"," '_enable_dict_to_input_mapping': True,\n"," '_expects_mask_arg': True,\n"," '_expects_training_arg': True,\n"," '_feed_input_names': ['NASNet_input'],\n"," '_feed_input_shapes': [(None, 224, 224, 3)],\n"," '_feed_inputs': [<tf.Tensor 'NASNet_input_10:0' shape=(None, 224, 224, 3) dtype=float32>],\n"," '_graph': None,\n"," '_inbound_nodes': [<tensorflow.python.keras.engine.node.Node at 0x7f6ce49dc668>],\n"," '_initial_weights': None,\n"," '_input_coordinates': [(<tensorflow.python.keras.engine.input_layer.InputLayer at 0x7f6ce97bcbe0>,\n","   0,\n","   0)],\n"," '_input_layers': [<tensorflow.python.keras.engine.input_layer.InputLayer at 0x7f6ce97bcbe0>],\n"," '_input_spec': None,\n"," '_is_compiled': True,\n"," '_is_graph_network': True,\n"," '_layer_call_argspecs': {<tensorflow.python.keras.engine.input_layer.InputLayer at 0x7f6ce97bcbe0>: FullArgSpec(args=['self', 'inputs'], varargs=None, varkw='kwargs', defaults=None, kwonlyargs=[], kwonlydefaults=None, annotations={}),\n","  <tensorflow.python.keras.engine.training.Model at 0x7f6ce991fb70>: FullArgSpec(args=['self', 'inputs', 'training', 'mask'], varargs=None, varkw=None, defaults=(None, None), kwonlyargs=[], kwonlydefaults=None, annotations={}),\n","  <tensorflow.python.keras.layers.core.Dense at 0x7f6ce97bc2b0>: FullArgSpec(args=['self', 'inputs'], varargs=None, varkw=None, defaults=None, kwonlyargs=[], kwonlydefaults=None, annotations={}),\n","  <tensorflow.python.keras.layers.core.Dense at 0x7f6ce97bc7b8>: FullArgSpec(args=['self', 'inputs'], varargs=None, varkw=None, defaults=None, kwonlyargs=[], kwonlydefaults=None, annotations={}),\n","  <tensorflow.python.keras.layers.core.Dropout at 0x7f6ce97bc6a0>: FullArgSpec(args=['self', 'inputs', 'training'], varargs=None, varkw=None, defaults=(None,), kwonlyargs=[], kwonlydefaults=None, annotations={}),\n","  <tensorflow.python.keras.layers.pooling.GlobalAveragePooling2D at 0x7f6ce99259b0>: FullArgSpec(args=['self', 'inputs'], varargs=None, varkw=None, defaults=None, kwonlyargs=[], kwonlydefaults=None, annotations={})},\n"," '_layers': [<tensorflow.python.keras.engine.input_layer.InputLayer at 0x7f6ce97bcbe0>,\n","  <tensorflow.python.keras.engine.training.Model at 0x7f6ce991fb70>,\n","  <tensorflow.python.keras.layers.pooling.GlobalAveragePooling2D at 0x7f6ce99259b0>,\n","  <tensorflow.python.keras.layers.core.Dense at 0x7f6ce97bc2b0>,\n","  <tensorflow.python.keras.layers.core.Dropout at 0x7f6ce97bc6a0>,\n","  <tensorflow.python.keras.layers.core.Dense at 0x7f6ce97bc7b8>],\n"," '_losses': [],\n"," '_metrics': [],\n"," '_metrics_lock': <unlocked _thread.lock object at 0x7f6cf3a66fa8>,\n"," '_name': 'NasNet-Covid19',\n"," '_nested_inputs': <tf.Tensor 'NASNet_input_10:0' shape=(None, 224, 224, 3) dtype=float32>,\n"," '_nested_outputs': <tf.Tensor 'dense_21/Identity:0' shape=(None, 2) dtype=float32>,\n"," '_network_nodes': {'NASNet_ib-1',\n","  'NASNet_input_ib-0',\n","  'dense_20_ib-0',\n","  'dense_21_ib-0',\n","  'dropout_10_ib-0',\n","  'global_average_pooling2d_10_ib-0'},\n"," '_nodes_by_depth': defaultdict(list,\n","             {0: [<tensorflow.python.keras.engine.node.Node at 0x7f6cf4d6fba8>],\n","              1: [<tensorflow.python.keras.engine.node.Node at 0x7f6cf4d65160>],\n","              2: [<tensorflow.python.keras.engine.node.Node at 0x7f6cf4d3ac18>],\n","              3: [<tensorflow.python.keras.engine.node.Node at 0x7f6ce4369cc0>],\n","              4: [<tensorflow.python.keras.engine.node.Node at 0x7f6ce97bcf28>],\n","              5: [<tensorflow.python.keras.engine.node.Node at 0x7f6ce97bcd68>]}),\n"," '_non_trainable_weights': [],\n"," '_obj_reference_counts_dict': ObjectIdentityDictionary({<_ObjectIdentityWrapper wrapping <tensorflow.python.keras.optimizer_v2.rmsprop.RMSprop object at 0x7f6cf4d3af28>>: 1, <_ObjectIdentityWrapper wrapping <tensorflow.python.keras.engine.compile_utils.LossesContainer object at 0x7f6ce433e550>>: 1, <_ObjectIdentityWrapper wrapping <tensorflow.python.keras.engine.compile_utils.MetricsContainer object at 0x7f6cf4d6fcf8>>: 1, <_ObjectIdentityWrapper wrapping True>: 1, <_ObjectIdentityWrapper wrapping 'categorical_crossentropy'>: 1, <_ObjectIdentityWrapper wrapping <tensorflow.python.eager.def_function.Function object at 0x7f6cf4d49710>>: 1, <_ObjectIdentityWrapper wrapping <tensorflow.python.eager.def_function.Function object at 0x7f6ce62c2780>>: 1, <_ObjectIdentityWrapper wrapping <tensorflow.python.keras.callbacks.History object at 0x7f6ce5972cf8>>: 1, <_ObjectIdentityWrapper wrapping False>: 1}),\n"," '_outbound_nodes': [],\n"," '_output_coordinates': [(<tensorflow.python.keras.layers.core.Dense at 0x7f6ce97bc7b8>,\n","   0,\n","   0)],\n"," '_output_layers': [<tensorflow.python.keras.layers.core.Dense at 0x7f6ce97bc7b8>],\n"," '_output_mask_cache': {},\n"," '_output_shape_cache': {((None, 224, 224, 3),): TensorShape([None, 2])},\n"," '_output_tensor_cache': {},\n"," '_reuse': None,\n"," '_run_eagerly': None,\n"," '_saved_model_inputs_spec': TensorSpec(shape=(None, 224, 224, 3), dtype=tf.float32, name='NASNet_input'),\n"," '_scope': None,\n"," '_self_name_based_restores': set(),\n"," '_self_setattr_tracking': True,\n"," '_self_unconditional_checkpoint_dependencies': [TrackableReference(name='optimizer', ref=<tensorflow.python.keras.optimizer_v2.rmsprop.RMSprop object at 0x7f6cf4d3af28>)],\n"," '_self_unconditional_deferred_dependencies': {},\n"," '_self_unconditional_dependency_names': {'optimizer': <tensorflow.python.keras.optimizer_v2.rmsprop.RMSprop at 0x7f6cf4d3af28>},\n"," '_self_update_uid': -1,\n"," '_stateful': False,\n"," '_supports_ragged_inputs': None,\n"," '_tensor_usage_count': Counter({'140105661801192': 1,\n","          '140105661803936': 1,\n","          '140105750590016': 1,\n","          '140105940707480': 1,\n","          '140105940792712': 1,\n","          '140105940925016': 1}),\n"," '_thread_local': <_thread._local at 0x7f6ce98bf620>,\n"," '_trackable_saver': <tensorflow.python.training.tracking.util.TrackableSaver at 0x7f6ce97bce80>,\n"," '_trainable': True,\n"," '_trainable_weights': [],\n"," '_training_state': None,\n"," '_updates': [],\n"," 'built': True,\n"," 'compiled_loss': <tensorflow.python.keras.engine.compile_utils.LossesContainer at 0x7f6ce433e550>,\n"," 'compiled_metrics': <tensorflow.python.keras.engine.compile_utils.MetricsContainer at 0x7f6cf4d6fcf8>,\n"," 'history': <tensorflow.python.keras.callbacks.History at 0x7f6ce5972cf8>,\n"," 'input_names': ['NASNet_input'],\n"," 'inputs': [<tf.Tensor 'NASNet_input_10:0' shape=(None, 224, 224, 3) dtype=float32>],\n"," 'loss': 'categorical_crossentropy',\n"," 'optimizer': <tensorflow.python.keras.optimizer_v2.rmsprop.RMSprop at 0x7f6cf4d3af28>,\n"," 'output_names': ['dense_21'],\n"," 'outputs': [<tf.Tensor 'dense_21/Identity:0' shape=(None, 2) dtype=float32>],\n"," 'predict_function': None,\n"," 'stop_training': False,\n"," 'supports_masking': False,\n"," 'test_function': <tensorflow.python.eager.def_function.Function at 0x7f6ce62c2780>,\n"," 'train_function': <tensorflow.python.eager.def_function.Function at 0x7f6cf4d49710>}"]},"metadata":{"tags":[]},"execution_count":25}]},{"cell_type":"code","metadata":{"id":"UDRe44b9ygGf","colab_type":"code","outputId":"484400b4-8152-4f2e-ca3c-4185a691fec4","executionInfo":{"status":"ok","timestamp":1590802326781,"user_tz":300,"elapsed":1023793,"user":{"displayName":"C C","photoUrl":"","userId":"11573350402054694558"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["for i,layer in enumerate(base_model.layers):\n","  print(i,layer.name)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["0 input_1\n","1 stem_conv1\n","2 stem_bn1\n","3 activation\n","4 reduction_conv_1_stem_1\n","5 reduction_bn_1_stem_1\n","6 activation_1\n","7 activation_3\n","8 separable_conv_1_pad_reduction_left1_stem_1\n","9 separable_conv_1_pad_reduction_right1_stem_1\n","10 separable_conv_1_reduction_left1_stem_1\n","11 separable_conv_1_reduction_right1_stem_1\n","12 separable_conv_1_bn_reduction_left1_stem_1\n","13 separable_conv_1_bn_reduction_right1_stem_1\n","14 activation_2\n","15 activation_4\n","16 separable_conv_2_reduction_left1_stem_1\n","17 separable_conv_2_reduction_right1_stem_1\n","18 activation_5\n","19 separable_conv_2_bn_reduction_left1_stem_1\n","20 separable_conv_2_bn_reduction_right1_stem_1\n","21 separable_conv_1_pad_reduction_right2_stem_1\n","22 activation_7\n","23 reduction_add_1_stem_1\n","24 separable_conv_1_reduction_right2_stem_1\n","25 separable_conv_1_pad_reduction_right3_stem_1\n","26 activation_9\n","27 separable_conv_1_bn_reduction_right2_stem_1\n","28 separable_conv_1_reduction_right3_stem_1\n","29 separable_conv_1_reduction_left4_stem_1\n","30 activation_6\n","31 separable_conv_1_bn_reduction_right3_stem_1\n","32 separable_conv_1_bn_reduction_left4_stem_1\n","33 reduction_pad_1_stem_1\n","34 separable_conv_2_reduction_right2_stem_1\n","35 activation_8\n","36 activation_10\n","37 reduction_left2_stem_1\n","38 separable_conv_2_bn_reduction_right2_stem_1\n","39 separable_conv_2_reduction_right3_stem_1\n","40 separable_conv_2_reduction_left4_stem_1\n","41 adjust_relu_1_stem_2\n","42 reduction_add_2_stem_1\n","43 reduction_left3_stem_1\n","44 separable_conv_2_bn_reduction_right3_stem_1\n","45 reduction_left4_stem_1\n","46 separable_conv_2_bn_reduction_left4_stem_1\n","47 reduction_right5_stem_1\n","48 zero_padding2d\n","49 reduction_add3_stem_1\n","50 add\n","51 reduction_add4_stem_1\n","52 cropping2d\n","53 reduction_concat_stem_1\n","54 adjust_avg_pool_1_stem_2\n","55 adjust_avg_pool_2_stem_2\n","56 activation_11\n","57 adjust_conv_1_stem_2\n","58 adjust_conv_2_stem_2\n","59 reduction_conv_1_stem_2\n","60 concatenate\n","61 reduction_bn_1_stem_2\n","62 adjust_bn_stem_2\n","63 activation_12\n","64 activation_14\n","65 separable_conv_1_pad_reduction_left1_stem_2\n","66 separable_conv_1_pad_reduction_right1_stem_2\n","67 separable_conv_1_reduction_left1_stem_2\n","68 separable_conv_1_reduction_right1_stem_2\n","69 separable_conv_1_bn_reduction_left1_stem_2\n","70 separable_conv_1_bn_reduction_right1_stem_2\n","71 activation_13\n","72 activation_15\n","73 separable_conv_2_reduction_left1_stem_2\n","74 separable_conv_2_reduction_right1_stem_2\n","75 activation_16\n","76 separable_conv_2_bn_reduction_left1_stem_2\n","77 separable_conv_2_bn_reduction_right1_stem_2\n","78 separable_conv_1_pad_reduction_right2_stem_2\n","79 activation_18\n","80 reduction_add_1_stem_2\n","81 separable_conv_1_reduction_right2_stem_2\n","82 separable_conv_1_pad_reduction_right3_stem_2\n","83 activation_20\n","84 separable_conv_1_bn_reduction_right2_stem_2\n","85 separable_conv_1_reduction_right3_stem_2\n","86 separable_conv_1_reduction_left4_stem_2\n","87 activation_17\n","88 separable_conv_1_bn_reduction_right3_stem_2\n","89 separable_conv_1_bn_reduction_left4_stem_2\n","90 reduction_pad_1_stem_2\n","91 separable_conv_2_reduction_right2_stem_2\n","92 activation_19\n","93 activation_21\n","94 reduction_left2_stem_2\n","95 separable_conv_2_bn_reduction_right2_stem_2\n","96 separable_conv_2_reduction_right3_stem_2\n","97 separable_conv_2_reduction_left4_stem_2\n","98 adjust_relu_1_0\n","99 reduction_add_2_stem_2\n","100 reduction_left3_stem_2\n","101 separable_conv_2_bn_reduction_right3_stem_2\n","102 reduction_left4_stem_2\n","103 separable_conv_2_bn_reduction_left4_stem_2\n","104 reduction_right5_stem_2\n","105 zero_padding2d_1\n","106 reduction_add3_stem_2\n","107 add_1\n","108 reduction_add4_stem_2\n","109 cropping2d_1\n","110 reduction_concat_stem_2\n","111 adjust_avg_pool_1_0\n","112 adjust_avg_pool_2_0\n","113 adjust_conv_1_0\n","114 adjust_conv_2_0\n","115 activation_22\n","116 concatenate_1\n","117 normal_conv_1_0\n","118 adjust_bn_0\n","119 normal_bn_1_0\n","120 activation_23\n","121 activation_25\n","122 activation_27\n","123 activation_29\n","124 activation_31\n","125 separable_conv_1_normal_left1_0\n","126 separable_conv_1_normal_right1_0\n","127 separable_conv_1_normal_left2_0\n","128 separable_conv_1_normal_right2_0\n","129 separable_conv_1_normal_left5_0\n","130 separable_conv_1_bn_normal_left1_0\n","131 separable_conv_1_bn_normal_right1_0\n","132 separable_conv_1_bn_normal_left2_0\n","133 separable_conv_1_bn_normal_right2_0\n","134 separable_conv_1_bn_normal_left5_0\n","135 activation_24\n","136 activation_26\n","137 activation_28\n","138 activation_30\n","139 activation_32\n","140 separable_conv_2_normal_left1_0\n","141 separable_conv_2_normal_right1_0\n","142 separable_conv_2_normal_left2_0\n","143 separable_conv_2_normal_right2_0\n","144 separable_conv_2_normal_left5_0\n","145 separable_conv_2_bn_normal_left1_0\n","146 separable_conv_2_bn_normal_right1_0\n","147 separable_conv_2_bn_normal_left2_0\n","148 separable_conv_2_bn_normal_right2_0\n","149 normal_left3_0\n","150 normal_left4_0\n","151 normal_right4_0\n","152 separable_conv_2_bn_normal_left5_0\n","153 normal_add_1_0\n","154 normal_add_2_0\n","155 normal_add_3_0\n","156 normal_add_4_0\n","157 normal_add_5_0\n","158 normal_concat_0\n","159 activation_33\n","160 activation_34\n","161 adjust_conv_projection_1\n","162 normal_conv_1_1\n","163 adjust_bn_1\n","164 normal_bn_1_1\n","165 activation_35\n","166 activation_37\n","167 activation_39\n","168 activation_41\n","169 activation_43\n","170 separable_conv_1_normal_left1_1\n","171 separable_conv_1_normal_right1_1\n","172 separable_conv_1_normal_left2_1\n","173 separable_conv_1_normal_right2_1\n","174 separable_conv_1_normal_left5_1\n","175 separable_conv_1_bn_normal_left1_1\n","176 separable_conv_1_bn_normal_right1_1\n","177 separable_conv_1_bn_normal_left2_1\n","178 separable_conv_1_bn_normal_right2_1\n","179 separable_conv_1_bn_normal_left5_1\n","180 activation_36\n","181 activation_38\n","182 activation_40\n","183 activation_42\n","184 activation_44\n","185 separable_conv_2_normal_left1_1\n","186 separable_conv_2_normal_right1_1\n","187 separable_conv_2_normal_left2_1\n","188 separable_conv_2_normal_right2_1\n","189 separable_conv_2_normal_left5_1\n","190 separable_conv_2_bn_normal_left1_1\n","191 separable_conv_2_bn_normal_right1_1\n","192 separable_conv_2_bn_normal_left2_1\n","193 separable_conv_2_bn_normal_right2_1\n","194 normal_left3_1\n","195 normal_left4_1\n","196 normal_right4_1\n","197 separable_conv_2_bn_normal_left5_1\n","198 normal_add_1_1\n","199 normal_add_2_1\n","200 normal_add_3_1\n","201 normal_add_4_1\n","202 normal_add_5_1\n","203 normal_concat_1\n","204 activation_45\n","205 activation_46\n","206 adjust_conv_projection_2\n","207 normal_conv_1_2\n","208 adjust_bn_2\n","209 normal_bn_1_2\n","210 activation_47\n","211 activation_49\n","212 activation_51\n","213 activation_53\n","214 activation_55\n","215 separable_conv_1_normal_left1_2\n","216 separable_conv_1_normal_right1_2\n","217 separable_conv_1_normal_left2_2\n","218 separable_conv_1_normal_right2_2\n","219 separable_conv_1_normal_left5_2\n","220 separable_conv_1_bn_normal_left1_2\n","221 separable_conv_1_bn_normal_right1_2\n","222 separable_conv_1_bn_normal_left2_2\n","223 separable_conv_1_bn_normal_right2_2\n","224 separable_conv_1_bn_normal_left5_2\n","225 activation_48\n","226 activation_50\n","227 activation_52\n","228 activation_54\n","229 activation_56\n","230 separable_conv_2_normal_left1_2\n","231 separable_conv_2_normal_right1_2\n","232 separable_conv_2_normal_left2_2\n","233 separable_conv_2_normal_right2_2\n","234 separable_conv_2_normal_left5_2\n","235 separable_conv_2_bn_normal_left1_2\n","236 separable_conv_2_bn_normal_right1_2\n","237 separable_conv_2_bn_normal_left2_2\n","238 separable_conv_2_bn_normal_right2_2\n","239 normal_left3_2\n","240 normal_left4_2\n","241 normal_right4_2\n","242 separable_conv_2_bn_normal_left5_2\n","243 normal_add_1_2\n","244 normal_add_2_2\n","245 normal_add_3_2\n","246 normal_add_4_2\n","247 normal_add_5_2\n","248 normal_concat_2\n","249 activation_57\n","250 activation_58\n","251 adjust_conv_projection_3\n","252 normal_conv_1_3\n","253 adjust_bn_3\n","254 normal_bn_1_3\n","255 activation_59\n","256 activation_61\n","257 activation_63\n","258 activation_65\n","259 activation_67\n","260 separable_conv_1_normal_left1_3\n","261 separable_conv_1_normal_right1_3\n","262 separable_conv_1_normal_left2_3\n","263 separable_conv_1_normal_right2_3\n","264 separable_conv_1_normal_left5_3\n","265 separable_conv_1_bn_normal_left1_3\n","266 separable_conv_1_bn_normal_right1_3\n","267 separable_conv_1_bn_normal_left2_3\n","268 separable_conv_1_bn_normal_right2_3\n","269 separable_conv_1_bn_normal_left5_3\n","270 activation_60\n","271 activation_62\n","272 activation_64\n","273 activation_66\n","274 activation_68\n","275 separable_conv_2_normal_left1_3\n","276 separable_conv_2_normal_right1_3\n","277 separable_conv_2_normal_left2_3\n","278 separable_conv_2_normal_right2_3\n","279 separable_conv_2_normal_left5_3\n","280 separable_conv_2_bn_normal_left1_3\n","281 separable_conv_2_bn_normal_right1_3\n","282 separable_conv_2_bn_normal_left2_3\n","283 separable_conv_2_bn_normal_right2_3\n","284 normal_left3_3\n","285 normal_left4_3\n","286 normal_right4_3\n","287 separable_conv_2_bn_normal_left5_3\n","288 normal_add_1_3\n","289 normal_add_2_3\n","290 normal_add_3_3\n","291 normal_add_4_3\n","292 normal_add_5_3\n","293 normal_concat_3\n","294 activation_70\n","295 activation_69\n","296 reduction_conv_1_reduce_4\n","297 adjust_conv_projection_reduce_4\n","298 reduction_bn_1_reduce_4\n","299 adjust_bn_reduce_4\n","300 activation_71\n","301 activation_73\n","302 separable_conv_1_pad_reduction_left1_reduce_4\n","303 separable_conv_1_pad_reduction_right1_reduce_4\n","304 separable_conv_1_reduction_left1_reduce_4\n","305 separable_conv_1_reduction_right1_reduce_4\n","306 separable_conv_1_bn_reduction_left1_reduce_4\n","307 separable_conv_1_bn_reduction_right1_reduce_4\n","308 activation_72\n","309 activation_74\n","310 separable_conv_2_reduction_left1_reduce_4\n","311 separable_conv_2_reduction_right1_reduce_4\n","312 activation_75\n","313 separable_conv_2_bn_reduction_left1_reduce_4\n","314 separable_conv_2_bn_reduction_right1_reduce_4\n","315 separable_conv_1_pad_reduction_right2_reduce_4\n","316 activation_77\n","317 reduction_add_1_reduce_4\n","318 separable_conv_1_reduction_right2_reduce_4\n","319 separable_conv_1_pad_reduction_right3_reduce_4\n","320 activation_79\n","321 separable_conv_1_bn_reduction_right2_reduce_4\n","322 separable_conv_1_reduction_right3_reduce_4\n","323 separable_conv_1_reduction_left4_reduce_4\n","324 activation_76\n","325 separable_conv_1_bn_reduction_right3_reduce_4\n","326 separable_conv_1_bn_reduction_left4_reduce_4\n","327 reduction_pad_1_reduce_4\n","328 separable_conv_2_reduction_right2_reduce_4\n","329 activation_78\n","330 activation_80\n","331 reduction_left2_reduce_4\n","332 separable_conv_2_bn_reduction_right2_reduce_4\n","333 separable_conv_2_reduction_right3_reduce_4\n","334 separable_conv_2_reduction_left4_reduce_4\n","335 adjust_relu_1_5\n","336 reduction_add_2_reduce_4\n","337 reduction_left3_reduce_4\n","338 separable_conv_2_bn_reduction_right3_reduce_4\n","339 reduction_left4_reduce_4\n","340 separable_conv_2_bn_reduction_left4_reduce_4\n","341 reduction_right5_reduce_4\n","342 zero_padding2d_2\n","343 reduction_add3_reduce_4\n","344 add_2\n","345 reduction_add4_reduce_4\n","346 cropping2d_2\n","347 reduction_concat_reduce_4\n","348 adjust_avg_pool_1_5\n","349 adjust_avg_pool_2_5\n","350 adjust_conv_1_5\n","351 adjust_conv_2_5\n","352 activation_81\n","353 concatenate_2\n","354 normal_conv_1_5\n","355 adjust_bn_5\n","356 normal_bn_1_5\n","357 activation_82\n","358 activation_84\n","359 activation_86\n","360 activation_88\n","361 activation_90\n","362 separable_conv_1_normal_left1_5\n","363 separable_conv_1_normal_right1_5\n","364 separable_conv_1_normal_left2_5\n","365 separable_conv_1_normal_right2_5\n","366 separable_conv_1_normal_left5_5\n","367 separable_conv_1_bn_normal_left1_5\n","368 separable_conv_1_bn_normal_right1_5\n","369 separable_conv_1_bn_normal_left2_5\n","370 separable_conv_1_bn_normal_right2_5\n","371 separable_conv_1_bn_normal_left5_5\n","372 activation_83\n","373 activation_85\n","374 activation_87\n","375 activation_89\n","376 activation_91\n","377 separable_conv_2_normal_left1_5\n","378 separable_conv_2_normal_right1_5\n","379 separable_conv_2_normal_left2_5\n","380 separable_conv_2_normal_right2_5\n","381 separable_conv_2_normal_left5_5\n","382 separable_conv_2_bn_normal_left1_5\n","383 separable_conv_2_bn_normal_right1_5\n","384 separable_conv_2_bn_normal_left2_5\n","385 separable_conv_2_bn_normal_right2_5\n","386 normal_left3_5\n","387 normal_left4_5\n","388 normal_right4_5\n","389 separable_conv_2_bn_normal_left5_5\n","390 normal_add_1_5\n","391 normal_add_2_5\n","392 normal_add_3_5\n","393 normal_add_4_5\n","394 normal_add_5_5\n","395 normal_concat_5\n","396 activation_92\n","397 activation_93\n","398 adjust_conv_projection_6\n","399 normal_conv_1_6\n","400 adjust_bn_6\n","401 normal_bn_1_6\n","402 activation_94\n","403 activation_96\n","404 activation_98\n","405 activation_100\n","406 activation_102\n","407 separable_conv_1_normal_left1_6\n","408 separable_conv_1_normal_right1_6\n","409 separable_conv_1_normal_left2_6\n","410 separable_conv_1_normal_right2_6\n","411 separable_conv_1_normal_left5_6\n","412 separable_conv_1_bn_normal_left1_6\n","413 separable_conv_1_bn_normal_right1_6\n","414 separable_conv_1_bn_normal_left2_6\n","415 separable_conv_1_bn_normal_right2_6\n","416 separable_conv_1_bn_normal_left5_6\n","417 activation_95\n","418 activation_97\n","419 activation_99\n","420 activation_101\n","421 activation_103\n","422 separable_conv_2_normal_left1_6\n","423 separable_conv_2_normal_right1_6\n","424 separable_conv_2_normal_left2_6\n","425 separable_conv_2_normal_right2_6\n","426 separable_conv_2_normal_left5_6\n","427 separable_conv_2_bn_normal_left1_6\n","428 separable_conv_2_bn_normal_right1_6\n","429 separable_conv_2_bn_normal_left2_6\n","430 separable_conv_2_bn_normal_right2_6\n","431 normal_left3_6\n","432 normal_left4_6\n","433 normal_right4_6\n","434 separable_conv_2_bn_normal_left5_6\n","435 normal_add_1_6\n","436 normal_add_2_6\n","437 normal_add_3_6\n","438 normal_add_4_6\n","439 normal_add_5_6\n","440 normal_concat_6\n","441 activation_104\n","442 activation_105\n","443 adjust_conv_projection_7\n","444 normal_conv_1_7\n","445 adjust_bn_7\n","446 normal_bn_1_7\n","447 activation_106\n","448 activation_108\n","449 activation_110\n","450 activation_112\n","451 activation_114\n","452 separable_conv_1_normal_left1_7\n","453 separable_conv_1_normal_right1_7\n","454 separable_conv_1_normal_left2_7\n","455 separable_conv_1_normal_right2_7\n","456 separable_conv_1_normal_left5_7\n","457 separable_conv_1_bn_normal_left1_7\n","458 separable_conv_1_bn_normal_right1_7\n","459 separable_conv_1_bn_normal_left2_7\n","460 separable_conv_1_bn_normal_right2_7\n","461 separable_conv_1_bn_normal_left5_7\n","462 activation_107\n","463 activation_109\n","464 activation_111\n","465 activation_113\n","466 activation_115\n","467 separable_conv_2_normal_left1_7\n","468 separable_conv_2_normal_right1_7\n","469 separable_conv_2_normal_left2_7\n","470 separable_conv_2_normal_right2_7\n","471 separable_conv_2_normal_left5_7\n","472 separable_conv_2_bn_normal_left1_7\n","473 separable_conv_2_bn_normal_right1_7\n","474 separable_conv_2_bn_normal_left2_7\n","475 separable_conv_2_bn_normal_right2_7\n","476 normal_left3_7\n","477 normal_left4_7\n","478 normal_right4_7\n","479 separable_conv_2_bn_normal_left5_7\n","480 normal_add_1_7\n","481 normal_add_2_7\n","482 normal_add_3_7\n","483 normal_add_4_7\n","484 normal_add_5_7\n","485 normal_concat_7\n","486 activation_116\n","487 activation_117\n","488 adjust_conv_projection_8\n","489 normal_conv_1_8\n","490 adjust_bn_8\n","491 normal_bn_1_8\n","492 activation_118\n","493 activation_120\n","494 activation_122\n","495 activation_124\n","496 activation_126\n","497 separable_conv_1_normal_left1_8\n","498 separable_conv_1_normal_right1_8\n","499 separable_conv_1_normal_left2_8\n","500 separable_conv_1_normal_right2_8\n","501 separable_conv_1_normal_left5_8\n","502 separable_conv_1_bn_normal_left1_8\n","503 separable_conv_1_bn_normal_right1_8\n","504 separable_conv_1_bn_normal_left2_8\n","505 separable_conv_1_bn_normal_right2_8\n","506 separable_conv_1_bn_normal_left5_8\n","507 activation_119\n","508 activation_121\n","509 activation_123\n","510 activation_125\n","511 activation_127\n","512 separable_conv_2_normal_left1_8\n","513 separable_conv_2_normal_right1_8\n","514 separable_conv_2_normal_left2_8\n","515 separable_conv_2_normal_right2_8\n","516 separable_conv_2_normal_left5_8\n","517 separable_conv_2_bn_normal_left1_8\n","518 separable_conv_2_bn_normal_right1_8\n","519 separable_conv_2_bn_normal_left2_8\n","520 separable_conv_2_bn_normal_right2_8\n","521 normal_left3_8\n","522 normal_left4_8\n","523 normal_right4_8\n","524 separable_conv_2_bn_normal_left5_8\n","525 normal_add_1_8\n","526 normal_add_2_8\n","527 normal_add_3_8\n","528 normal_add_4_8\n","529 normal_add_5_8\n","530 normal_concat_8\n","531 activation_129\n","532 activation_128\n","533 reduction_conv_1_reduce_8\n","534 adjust_conv_projection_reduce_8\n","535 reduction_bn_1_reduce_8\n","536 adjust_bn_reduce_8\n","537 activation_130\n","538 activation_132\n","539 separable_conv_1_pad_reduction_left1_reduce_8\n","540 separable_conv_1_pad_reduction_right1_reduce_8\n","541 separable_conv_1_reduction_left1_reduce_8\n","542 separable_conv_1_reduction_right1_reduce_8\n","543 separable_conv_1_bn_reduction_left1_reduce_8\n","544 separable_conv_1_bn_reduction_right1_reduce_8\n","545 activation_131\n","546 activation_133\n","547 separable_conv_2_reduction_left1_reduce_8\n","548 separable_conv_2_reduction_right1_reduce_8\n","549 activation_134\n","550 separable_conv_2_bn_reduction_left1_reduce_8\n","551 separable_conv_2_bn_reduction_right1_reduce_8\n","552 separable_conv_1_pad_reduction_right2_reduce_8\n","553 activation_136\n","554 reduction_add_1_reduce_8\n","555 separable_conv_1_reduction_right2_reduce_8\n","556 separable_conv_1_pad_reduction_right3_reduce_8\n","557 activation_138\n","558 separable_conv_1_bn_reduction_right2_reduce_8\n","559 separable_conv_1_reduction_right3_reduce_8\n","560 separable_conv_1_reduction_left4_reduce_8\n","561 activation_135\n","562 separable_conv_1_bn_reduction_right3_reduce_8\n","563 separable_conv_1_bn_reduction_left4_reduce_8\n","564 reduction_pad_1_reduce_8\n","565 separable_conv_2_reduction_right2_reduce_8\n","566 activation_137\n","567 activation_139\n","568 reduction_left2_reduce_8\n","569 separable_conv_2_bn_reduction_right2_reduce_8\n","570 separable_conv_2_reduction_right3_reduce_8\n","571 separable_conv_2_reduction_left4_reduce_8\n","572 adjust_relu_1_9\n","573 reduction_add_2_reduce_8\n","574 reduction_left3_reduce_8\n","575 separable_conv_2_bn_reduction_right3_reduce_8\n","576 reduction_left4_reduce_8\n","577 separable_conv_2_bn_reduction_left4_reduce_8\n","578 reduction_right5_reduce_8\n","579 zero_padding2d_3\n","580 reduction_add3_reduce_8\n","581 add_3\n","582 reduction_add4_reduce_8\n","583 cropping2d_3\n","584 reduction_concat_reduce_8\n","585 adjust_avg_pool_1_9\n","586 adjust_avg_pool_2_9\n","587 adjust_conv_1_9\n","588 adjust_conv_2_9\n","589 activation_140\n","590 concatenate_3\n","591 normal_conv_1_9\n","592 adjust_bn_9\n","593 normal_bn_1_9\n","594 activation_141\n","595 activation_143\n","596 activation_145\n","597 activation_147\n","598 activation_149\n","599 separable_conv_1_normal_left1_9\n","600 separable_conv_1_normal_right1_9\n","601 separable_conv_1_normal_left2_9\n","602 separable_conv_1_normal_right2_9\n","603 separable_conv_1_normal_left5_9\n","604 separable_conv_1_bn_normal_left1_9\n","605 separable_conv_1_bn_normal_right1_9\n","606 separable_conv_1_bn_normal_left2_9\n","607 separable_conv_1_bn_normal_right2_9\n","608 separable_conv_1_bn_normal_left5_9\n","609 activation_142\n","610 activation_144\n","611 activation_146\n","612 activation_148\n","613 activation_150\n","614 separable_conv_2_normal_left1_9\n","615 separable_conv_2_normal_right1_9\n","616 separable_conv_2_normal_left2_9\n","617 separable_conv_2_normal_right2_9\n","618 separable_conv_2_normal_left5_9\n","619 separable_conv_2_bn_normal_left1_9\n","620 separable_conv_2_bn_normal_right1_9\n","621 separable_conv_2_bn_normal_left2_9\n","622 separable_conv_2_bn_normal_right2_9\n","623 normal_left3_9\n","624 normal_left4_9\n","625 normal_right4_9\n","626 separable_conv_2_bn_normal_left5_9\n","627 normal_add_1_9\n","628 normal_add_2_9\n","629 normal_add_3_9\n","630 normal_add_4_9\n","631 normal_add_5_9\n","632 normal_concat_9\n","633 activation_151\n","634 activation_152\n","635 adjust_conv_projection_10\n","636 normal_conv_1_10\n","637 adjust_bn_10\n","638 normal_bn_1_10\n","639 activation_153\n","640 activation_155\n","641 activation_157\n","642 activation_159\n","643 activation_161\n","644 separable_conv_1_normal_left1_10\n","645 separable_conv_1_normal_right1_10\n","646 separable_conv_1_normal_left2_10\n","647 separable_conv_1_normal_right2_10\n","648 separable_conv_1_normal_left5_10\n","649 separable_conv_1_bn_normal_left1_10\n","650 separable_conv_1_bn_normal_right1_10\n","651 separable_conv_1_bn_normal_left2_10\n","652 separable_conv_1_bn_normal_right2_10\n","653 separable_conv_1_bn_normal_left5_10\n","654 activation_154\n","655 activation_156\n","656 activation_158\n","657 activation_160\n","658 activation_162\n","659 separable_conv_2_normal_left1_10\n","660 separable_conv_2_normal_right1_10\n","661 separable_conv_2_normal_left2_10\n","662 separable_conv_2_normal_right2_10\n","663 separable_conv_2_normal_left5_10\n","664 separable_conv_2_bn_normal_left1_10\n","665 separable_conv_2_bn_normal_right1_10\n","666 separable_conv_2_bn_normal_left2_10\n","667 separable_conv_2_bn_normal_right2_10\n","668 normal_left3_10\n","669 normal_left4_10\n","670 normal_right4_10\n","671 separable_conv_2_bn_normal_left5_10\n","672 normal_add_1_10\n","673 normal_add_2_10\n","674 normal_add_3_10\n","675 normal_add_4_10\n","676 normal_add_5_10\n","677 normal_concat_10\n","678 activation_163\n","679 activation_164\n","680 adjust_conv_projection_11\n","681 normal_conv_1_11\n","682 adjust_bn_11\n","683 normal_bn_1_11\n","684 activation_165\n","685 activation_167\n","686 activation_169\n","687 activation_171\n","688 activation_173\n","689 separable_conv_1_normal_left1_11\n","690 separable_conv_1_normal_right1_11\n","691 separable_conv_1_normal_left2_11\n","692 separable_conv_1_normal_right2_11\n","693 separable_conv_1_normal_left5_11\n","694 separable_conv_1_bn_normal_left1_11\n","695 separable_conv_1_bn_normal_right1_11\n","696 separable_conv_1_bn_normal_left2_11\n","697 separable_conv_1_bn_normal_right2_11\n","698 separable_conv_1_bn_normal_left5_11\n","699 activation_166\n","700 activation_168\n","701 activation_170\n","702 activation_172\n","703 activation_174\n","704 separable_conv_2_normal_left1_11\n","705 separable_conv_2_normal_right1_11\n","706 separable_conv_2_normal_left2_11\n","707 separable_conv_2_normal_right2_11\n","708 separable_conv_2_normal_left5_11\n","709 separable_conv_2_bn_normal_left1_11\n","710 separable_conv_2_bn_normal_right1_11\n","711 separable_conv_2_bn_normal_left2_11\n","712 separable_conv_2_bn_normal_right2_11\n","713 normal_left3_11\n","714 normal_left4_11\n","715 normal_right4_11\n","716 separable_conv_2_bn_normal_left5_11\n","717 normal_add_1_11\n","718 normal_add_2_11\n","719 normal_add_3_11\n","720 normal_add_4_11\n","721 normal_add_5_11\n","722 normal_concat_11\n","723 activation_175\n","724 activation_176\n","725 adjust_conv_projection_12\n","726 normal_conv_1_12\n","727 adjust_bn_12\n","728 normal_bn_1_12\n","729 activation_177\n","730 activation_179\n","731 activation_181\n","732 activation_183\n","733 activation_185\n","734 separable_conv_1_normal_left1_12\n","735 separable_conv_1_normal_right1_12\n","736 separable_conv_1_normal_left2_12\n","737 separable_conv_1_normal_right2_12\n","738 separable_conv_1_normal_left5_12\n","739 separable_conv_1_bn_normal_left1_12\n","740 separable_conv_1_bn_normal_right1_12\n","741 separable_conv_1_bn_normal_left2_12\n","742 separable_conv_1_bn_normal_right2_12\n","743 separable_conv_1_bn_normal_left5_12\n","744 activation_178\n","745 activation_180\n","746 activation_182\n","747 activation_184\n","748 activation_186\n","749 separable_conv_2_normal_left1_12\n","750 separable_conv_2_normal_right1_12\n","751 separable_conv_2_normal_left2_12\n","752 separable_conv_2_normal_right2_12\n","753 separable_conv_2_normal_left5_12\n","754 separable_conv_2_bn_normal_left1_12\n","755 separable_conv_2_bn_normal_right1_12\n","756 separable_conv_2_bn_normal_left2_12\n","757 separable_conv_2_bn_normal_right2_12\n","758 normal_left3_12\n","759 normal_left4_12\n","760 normal_right4_12\n","761 separable_conv_2_bn_normal_left5_12\n","762 normal_add_1_12\n","763 normal_add_2_12\n","764 normal_add_3_12\n","765 normal_add_4_12\n","766 normal_add_5_12\n","767 normal_concat_12\n","768 activation_187\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"9cXJ-epl9iRe","colab_type":"text"},"source":["# TO Try \n","\n","1. Create a custom callback to perform EarlyStopping on validation_acc or validation_loss"]},{"cell_type":"code","metadata":{"id":"_sCYgn35axo7","colab_type":"code","colab":{}},"source":["nasnet_batch = 16\n","\n","train_generator, valid_generator, test_generator = get_train_val_test_data_aug_gen(\n","    tf.keras.applications.nasnet.preprocess_input,\n","    (224, 224),\n","    nasnet_batch)\n","\n","base_model = tf.keras.applications.nasnet.NASNetMobile(\n","    input_shape=(224, 224, 3),\n","    include_top=False,\n","    weights=\"imagenet\"\n",")\n","\n","# Freeze the weights on the feature extractor so as to keep them!\n","base_model.trainable = False\n","\n","# Add an FC and Classifier layers\n","\n","nasnet_model = tf.keras.models.Sequential([\n","                base_model,\n","                \n","                tf.keras.layers.GlobalAveragePooling2D(),\n","\n","                tf.keras.layers.Dense(512, activation='relu'),\n","\n","                # Dropout\n","                tf.keras.layers.Dropout(0.5),\n","\n","                #Output   \n","                tf.keras.layers.Dense(2, activation=tf.nn.softmax)\n","            ], name = \"NasNet-Covid19\")\n","\n","# Add an optimizer\n","\n","nasnet_model.compile(optimizer=\"adam\",\n","                        loss='categorical_crossentropy',\n","                        metrics=['accuracy'])\n","\n","evaluate_model(nasnet_model,\n","                train_generator,\n","                valid_generator,\n","                test_generator,                  \n","                epochs=10,\n","                batch=nasnet_batch,\n","                labels=HUMAN_READABLE_LABELS,\n","                callbacks = None,\n","                title = \"NasNet\")"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ngBC8mDva45C","colab_type":"text"},"source":["# Best Run"]}]}